import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Load the Iris dataset
iris = datasets.load_iris()

# Create a DataFrame
data = pd.DataFrame(iris.data, columns=iris.feature_names)
data['species'] = iris.target

# Define features (X) and labels (y)
X = data.drop('species', axis=1)
y = data['species']

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Print accuracy
print("Accuracy:", metrics.accuracy_score(y_test, y_pred))

# Predict species for a new sample
new_sample = [[3, 5, 4, 2]]  # New sample features
predicted_species = iris.target_names[clf.predict(new_sample)[0]]
print('Predicted species:', predicted_species)

# Plot feature importances
importances = clf.feature_importances_
indices = range(len(importances))

plt.figure(figsize=(10, 6))
plt.title("Feature Importances")
plt.barh(indices, importances, color='skyblue')
plt.yticks(indices, iris.feature_names)
plt.xlabel("Relative Importance")
plt.show()
